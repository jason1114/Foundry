// Generated by CoffeeScript 1.8.0
(function() {
  var common_fields, define_controller, supported_field, supported_field_setting;

  supported_field = window.app_config.supported_field;

  supported_field_setting = window.app_config.supported_field_setting;

  common_fields = window.app_config.common_fields;

  define('model_manager', function() {
    var user_plugin;
    return user_plugin = {
      name: 'model_manager',
      anchor: '#/model_manager',
      title: 'Model Management',
      type: 'plugin',
      icon: 'icon-list',
      init: function() {
        var attrs, field_model_name, fields_num, self, _results;
        self = this;
        console.log('init');
        fields_num = Object.keys(supported_field).length;
        _results = [];
        for (field_model_name in supported_field) {
          attrs = supported_field[field_model_name];
          _results.push(foundry.model(field_model_name, attrs.concat(common_fields), function() {
            if (fields_num-- === 1) {
              foundry.initialized(self.name);
              return define_controller();
            }
          }));
        }
        return _results;
      }
    };
  });

  define_controller = function() {
    return angular.module('foundry').controller('ModelController', [
      '$scope', '$foundry', function($scope, $foundry) {
        var field_name, file_module, name, position, supported_field_models, _i, _len, _ref, _ref1;
        window.scope = $scope;
        $scope.make_range = function(start, end, step) {
          var result, v;
          result = [];
          v = start;
          while ((end > start ? v <= end : v >= end)) {
            result.push(v);
            v += step;
          }
          return result;
        };
        $scope.encodeURI = window.encodeURI;
        $scope.keys = Object.keys;
        $scope.$safeApply = function(fn) {
          var phase;
          phase = this.$root.$$phase;
          if (phase === '$apply' || phase === '$digest') {
            if (fn && (typeof fn === 'function')) {
              return fn();
            }
          } else {
            return this.$apply(fn);
          }
        };
        $scope.is_field_hidden = function(type) {
          var idx;
          idx = Object.keys(window.app_config.show_in_detail).indexOf(type);
          if (idx === -1) {
            return false;
          } else {
            return true;
          }
        };
        $scope.current = {};
        $scope.show_in_detail = window.app_config.show_in_detail;
        $scope.hide_in_left = [];
        $scope.hide_in_right = [];
        _ref = $scope.show_in_detail;
        for (name in _ref) {
          position = _ref[name];
          if (position === 'left') {
            $scope.hide_in_left.push(name);
          } else {
            $scope.hide_in_right.push(name);
          }
        }
        supported_field_models = {};
        _ref1 = Object.keys(supported_field);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          field_name = _ref1[_i];
          supported_field_models[field_name] = foundry.load_model(field_name);
        }
        file_module = foundry.load('document');
        $scope.change_selected = function(name) {
          return $scope.selected_model = name;
        };
        $scope.fileNameChanged = function() {
          field_name = event.target.dataset.field;
          $scope.current[$scope.selected_model][field_name + "_choosed_file_"] = event.target.files[0];
          return $scope.$safeApply();
        };
        $scope.upload = function(field_name) {
          var spinner;
          spinner = $foundry.spinner({
            type: 'loading',
            text: 'Uploading '
          });
          Nimbus.Binary.upload_file($scope.current[$scope.selected_model][field_name + '_choosed_file_'], function(file) {
            file_module.set(file._file.id, file._file);
            $scope.current[$scope.selected_model][field_name + "_uploaded_"] = {
              thumb: file._file.thumbnailLink,
              name: file.name,
              link: file.directlink
            };
            $scope.current[$scope.selected_model][field_name] = $scope.current[$scope.selected_model][field_name + "_uploaded_"].link;
            $scope.current[$scope.selected_model][field_name + "_thumb_"] = $scope.current[$scope.selected_model][field_name + "_uploaded_"].thumb;
            $scope.current[$scope.selected_model][field_name + "_choosed_file_"] = null;
            spinner.hide();
            return $scope.$safeApply();
          });
        };
        $scope.add = function() {
          var current_data, data, field_info, field_info_list, is_required, _j, _len1;
          field_info_list = $scope.generated_models[$scope.selected_model];
          data = {};
          current_data = $scope.current[$scope.selected_model];
          for (_j = 0, _len1 = field_info_list.length; _j < _len1; _j++) {
            field_info = field_info_list[_j];
            is_required = field_info.setting.required;
            if (is_required && (current_data.default_value === null || current_data.default_value === void 0)) {
              data[field_info.name] = field_info.setting.default_value;
            } else {
              data[field_info.name] = current_data[field_info.name];
            }
          }
          $scope.user_models[$scope.selected_model].create(data);
          return $scope.load();
        };
        $scope.load = function() {
          var attrs, field, field_info, model, model_info_list, user_models_num, _j, _k, _len1, _len2, _ref2, _ref3, _ref4, _results;
          $scope.generated_models = {};
          for (name in supported_field_models) {
            model = supported_field_models[name];
            _ref2 = model.all();
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              field = _ref2[_j];
              if (!$scope.generated_models[field.model_belonged_to]) {
                $scope.generated_models[field.model_belonged_to] = [];
              }
              field_info = {
                name: field.field_name,
                type: name,
                setting: field
              };
              $scope.generated_models[field.model_belonged_to].push(field_info);
            }
          }
          $scope.user_models = {};
          $scope.user_records = {};
          user_models_num = Object.keys($scope.generated_models).length;
          _ref3 = $scope.generated_models;
          for (name in _ref3) {
            model_info_list = _ref3[name];
            attrs = model_info_list.map(function(model_info) {
              return model_info.name;
            });
            foundry.model(name, attrs, function(loaded_model) {
              $scope.user_models[name] = loaded_model;
              $scope.user_records[name] = loaded_model.all();
              if (user_models_num-- === 1) {
                if (!$scope.selected_model) {
                  return $scope.selected_model = Object.keys($scope.generated_models)[0];
                }
              }
            });
          }
          _ref4 = Object.keys($scope.generated_models);
          _results = [];
          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
            name = _ref4[_k];
            _results.push($scope.current[name] = {});
          }
          return _results;
        };
        return $scope.load();
      }
    ]);
  };

}).call(this);
