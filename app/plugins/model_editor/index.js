// Generated by CoffeeScript 1.8.0
(function() {
  var common_fields, define_controller, supported_field;

  supported_field = {
    '_field_switch': ["on_value", "off_value", "default_value"],
    '_field_text_input': ["default_value", "required"],
    '_field_text_area': ["default_value", "required"],
    '_field_rate': ["default_value", "max_rate"],
    '_field_number_input': ["default_value", "max_value", "min_value", "required"],
    '_field_image': ["required"]
  };

  common_fields = ["model_belonged_to", "field_name"];

  define('model_editor', function() {
    var user_plugin;
    return user_plugin = {
      name: 'model_editor',
      anchor: '#/model_editor',
      title: 'Model Editor',
      type: 'plugin',
      icon: 'icon-pencil',
      init: function() {
        var attrs, field, fields_num, self, _results;
        self = this;
        console.log('init');
        fields_num = Object.keys(supported_field).length;
        _results = [];
        for (field in supported_field) {
          attrs = supported_field[field];
          _results.push(foundry.model(field, attrs.concat(common_fields), function() {
            if (fields_num-- === 1) {
              foundry.initialized(self.name);
              return define_controller();
            }
          }));
        }
        return _results;
      }
    };
  });

  define_controller = function() {
    return angular.module('foundry').controller('ModelEditorController', [
      '$scope', '$foundry', function($scope, $foundry) {
        var generated_prefix, get_values_from_scope, model, name, _ref, _results;
        window.scope = $scope;
        generated_prefix = "_model_";
        $scope.generated_models = {};
        $scope.fields_in_new_model = [];
        get_values_from_scope = function(key_list) {
          var key, map, _i, _len;
          map = {};
          for (_i = 0, _len = key_list.length; _i < _len; _i++) {
            key = key_list[_i];
            map[key] = $scope[key];
          }
          return map;
        };
        $scope.push_field_to_new_model = function(type) {
          var field, keys, to_push, _i, _len, _ref;
          _ref = $scope.fields_in_new_model;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            if (field.name === $scope.field_name_to_add) {
              sweetAlert("Oops...", "Field name " + field.name + " already exists.", "error");
              return;
            }
          }
          to_push = {
            name: $scope.field_name_to_add,
            type: type,
            setting: null
          };
          keys = supported_field[type].map(function(attr) {
            return "" + type + "_" + attr;
          });
          to_push.setting = get_values_from_scope(keys);
          return $scope.fields_in_new_model.push(to_push);
        };
        $scope.delete_field_from_new_model = function(index) {
          return $scope.fields_in_new_model.splice(index, 1);
        };
        _ref = foundry._models;
        _results = [];
        for (name in _ref) {
          model = _ref[name];
          if (name.indexOf(generated_prefix) !== -1) {
            _results.push($scope.generated_models[name.substr(generated_prefix.length)] = model);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    ]);
  };

}).call(this);
